#!/usr/bin/env node

const fs           = require('fs-extra')
const os           = require('os');
const path         = require('path');
const program      = require('commander');
const readline     = require('readline');
const sortedObject = require('sorted-object');
const util         = require('util');

var _exit = process.exit;
var eol = os.EOL;
var pkg = require('../package.json');

var version = pkg.version;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit

// CLI

around(program, 'optionMissingArgument', function (fn, args) {
  program.outputHelp()
  fn.apply(this, args)
  return { args: [], unknown: [] }
})

before(program, 'outputHelp', function () {
  // track if help was shown for unknown option
  this._helpShown = true
});

before(program, 'unknownOption', function () {
  // allow unknown options if help was shown, to prevent trailing error
  this._allowUnknownOption = this._helpShown

  // show help if not yet shown
  if (!this._helpShown) {
    program.outputHelp()
  }
})

program
  .version(version, '    --version')
  .usage('[options] [dir]')
  .option('-c, --css <engine>', 'add stylesheet <engine> support (plain|less|scss|sass) (defaults to scss)')
  .option('-a, --auth', 'Add passport-local authentication')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

if (!exit.exited) {
  main();
}

/**
 * Install an around function; AOP.
 */

function around(obj, method, fn) {
  var old = obj[method]

  obj[method] = function () {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) args[i] = arguments[i]
    return fn.call(this, old, args)
  }
}

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  var old = obj[method];

  obj[method] = function () {
    fn.call(this);
    old.apply(this, arguments);
  };
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplication(app_name, path) {

  let app = loadTemplate('js/app.js');

  createDir(`${path}/bin`);
  createDir(`${path}/models`);
  createDir(`${path}/public/images`);
  createDir(`${path}/public/javascripts`);
  createDir(`${path}/public/stylesheets`);
  createDir(`${path}/routes`);
  createDir(`${path}/views`);

  // package.json
  var pkg = {
    name: app_name,
    version: '0.0.0',
    private: true,
    scripts: { start: 'nodemon ./bin/www' },
    dependencies: {
      'body-parser':   '~1.18.2',
      'cookie-parser': '~1.4.3',
      'express':       '~4.16.0',
      'hbs':           '~4.0.1',
      'mongoose':      '~4.13.4',
      'morgan':        '~1.9.0',
      'serve-favicon': '~2.4.5',
      'dotenv':        '~4.0.0'
    }
  }

  // CSS Engine support
  switch (program.css || 'scss') {
    case 'plain':
      copy_template('css/style.css',  `${path}/public/stylesheets/style.css`);
      expressCss = '';
      break;
    case 'less':
      copy_template('css/style.less', `${path}/public/stylesheets/style.less`);
      expressCss = "app.use(require('less-middleware')(path.join(__dirname, 'public')));";
      pkg.dependencies['less-middleware'] = '~2.2.1';
      break;
    case 'sass':
      copy_template('css/style.sass', `${path}/public/stylesheets/style.sass`);
      pkg.dependencies['node-sass-middleware'] = '0.11.0';
      expressCss = `
app.use(require('node-sass-middleware')({
  src:  path.join(__dirname, 'public'),
  dest: path.join(__dirname, 'public'),
  indentedSyntax: true,
  sourceMap: true
}));
      `;
      break;
    case 'scss':
      copy_template('css/style.scss', `${path}/public/stylesheets/style.scss`);
      pkg.dependencies['node-sass-middleware'] = '0.11.0';
      expressCss = `
app.use(require('node-sass-middleware')({
  src:  path.join(__dirname, 'public'),
  dest: path.join(__dirname, 'public'),
  sourceMap: true
}));
      `;
  }

  app = app.replace('{expressCss}', expressCss);
  app = app.replace('{app_name}',   app_name);

  // sort dependencies like npm(1)
  pkg.dependencies = sortedObject(pkg.dependencies);

  copy_template('.env',                  `${path}/.env`);
  copy_template('js/gitignore',          `${path}/.gitignore`);
  copy_template('js/www',                `${path}/bin/www`);
  copy_template('js/routes/index.js',    `${path}/routes/index.js`)
  copy_template('hbs/index.hbs',         `${path}/views/index.hbs`);
  copy_template('hbs/layout.hbs',        `${path}/views/layout.hbs`);
  copy_template('hbs/error.hbs',         `${path}/views/error.hbs`);
  copy_template('images/favicon.ico',    `${path}/public/images/favicon.ico`);
  copy_template('javascripts/script.js', `${path}/public/javascripts/script.js`);

  createFile(`${path}/package.json`, JSON.stringify(pkg, null, 2) + '\n');
  createFile(`${path}/app.js`,       app);

  console.log();
  console.log('   Install dependencies:');
  console.log('   $ cd %s && npm install', path);
  console.log();
  console.log('   Start your app:');
  console.log('    $ npm start');
  console.log();
}

function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  createFile(to, fs.readFileSync(from, 'utf-8'));
}

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

// Create an app name from a directory path, fitting npm naming requirements.
function createAppName(pathName) {
  return path.basename(pathName)
    .replace(/[^A-Za-z0-9\.()!~*'-]+/g, '-')
    .replace(/^[-_\.]+|-+$/g, '')
    .toLowerCase()
}

// Graceful exit for async STDIO
function exit(code) {
  function done() { if (!(draining--)) _exit(code); }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream){
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

function main() {
  var destinationPath = program.args.shift() || '.';
  var appName = createAppName(path.resolve(destinationPath)) || 'hello-world'

  // Generate application
  if (fs.existsSync(destinationPath)) {
    if (program.force) {
      createApplication(appName, destinationPath);
    } else {
      confirm('destination is not empty, continue? [y/N] ', ok => {
        if (ok) { createApplication(appName, destinationPath); }
        else    { console.error('aborting'); exit(1); }
      });
    }
  } else {
    createApplication(appName, destinationPath);
  }
}

// Display a warning similar to how errors are displayed by commander.
function warning(message) {
  console.error()
  message.split('\n').forEach(function (line) {
    console.error('  warning: %s', line)
  })
  console.error()
}

function createFile(path, str) {
  try {
    fs.writeFileSync(path, str, { mode: 0o666 });
    console.log('   \x1b[36mcreate\x1b[0m file : ' + path);
  } catch(err) {
    console.error(err);
  }
}

function createDir(path) {
  try {
    fs.mkdirsSync(path);
    console.log('   \033[36mcreate\033[0m dir  : ' + path);
  } catch(err) {
    console.error(err);
  }
}
